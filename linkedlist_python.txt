# Author: Richard Backscheider
# Date: November 24, 2024

# Intent: The intent is to implement a singly linked list in Python for
# for managing and dynamically storing data using basic operations
# such as appending and displaying elements

# Decisions: The Linkedlist uses a 'node' class to represent elements
# and initializes as an empty list "head = None". Nodes are added by
# setting the head (if empty) or linking to the last node with a formatted
# data1 -> data2 style for eay display

# Import Node class from the node module
from node.node import Node

class LinkedList:
    # LinkedList is a class that implements a singly linked list.
    def __init__(self):
        # Initialize an empty list.
        self.head = None  # First node in the list

    def append(self, data):
        # Inserts a new node with the given data to the end of the list.
        new_node = Node(data)  # Create a new node

        # If the list is empty, set the new node as the head
        if not self.head:
            self.head = new_node
            return

        # Traverse to the last node
        last_node = self.head
        while last_node.next:
            last_node = last_node.next

        last_node.next = new_node  # Link new node to the last node.

    def display(self):
        # Displays the LinkedList in data1 -> data2 -> .... format.
        elements = []  # Store node data
        current = self.head  # Start at the head

        # Loop through the list to retrieve data of each node
        while current:
            elements.append(current.data)
            current = current.next

        # Display the list as a string with -> linking each element
        print(" -> ".join(map(str, elements)))  # Print list representation